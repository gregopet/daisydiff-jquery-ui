// Generated by CoffeeScript 1.3.3
var $shownDialog, FixCalcXY, changes, constructTooltip, handleShortcut, imagePath, nextKeys, prevKeys, selectedElement, showTip, updateOverlays,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

imagePath = 'oldimages/';

changes = [];

selectedElement = null;

$shownDialog = null;

prevKeys = [83, 37, 80];

nextKeys = [68, 39, 78];

$(function() {
  $('window').bind('resize', updateOverlays);
  $(document).bind('keydown', handleShortcut);
  return selectedElement = $("a[id|='first']")[0];
});

window.tipC = function(content) {
  return showTip(content);
};

window.tipA = function(content) {
  return showTip(content);
};

window.tipR = function(content) {
  return showTip(content);
};

showTip = function(content) {
  var _ref;
  if ($shownDialog != null) {
    if ((_ref = $shownDialog.dialog('close')) != null) {
      _ref.dialog('destroy');
    }
  }
  $shownDialog = $("<div class='diff-dialog'>" + content + "</div>").dialog();
  return false;
};

window.constructToolTipC = function(elem) {
  return constructTooltip(elem);
};

window.constructToolTipA = function(elem) {
  return constructTooltip(elem);
};

window.constructToolTipR = function(elem) {
  return constructTooltip(elem);
};

constructTooltip = function(elem) {
  var changeHtml, change_id, dialogChangedType, dialogClass, next_id, previous_id;
  selectedElement = elem;
  previous_id = elem.getAttribute("previous");
  next_id = elem.getAttribute("next");
  change_id = elem.getAttribute("changeId");
  dialogChangedType = $(elem).hasClass('diff-html-changed');
  dialogClass = dialogChangedType ? 'diff-tooltip-link-changed' : 'diff-tooltip-link';
  changeHtml = dialogChangedType ? elem.getAttribute("changes") : '';
  return "" + changeHtml + "\n<table class='" + dialogClass + "'>\n	<tr>\n		<td class='diff-tooltip-prev'>\n			<a class='diffpage-html-a' href='#" + previous_id + "' onClick='scrollToEvent(event)'><img class='diff-icon' src='" + imagePath + "diff-previous.gif' title='Go to previous.'/></a>\n		</td>\n		<td>\n			&#160;<a href='#" + change_id + "'>#" + change_id + "</a>&#160;\n		</td>\n		<td class='diff-tooltip-next'>\n			<a class='diffpage-html-a' href='#" + next_id + "' onClick='scrollToEvent(event)'><img class='diff-icon' src='" + imagePath + "diff-next.gif' title='Go to next.'/></a>\n		</td>\n	</tr>\n</table>";
};

updateOverlays = function() {
  var existingDivs, filter, image, _i, _len, _ref, _ref1, _results;
  _ref = document.getElementsByTagName("img");
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    image = _ref[_i];
    if ((_ref1 = image.getAttribute('changeType')) === "diff-removed-image" || _ref1 === "diff-added-image") {
      filter = null;
      existingDivs = image.parentNode.getElementsByTagName('div');
      if (existingDivs.length > 0 && existingDivs[0].className === image.getAttribute("changeType")) {
        filter = existingDivs[0];
      } else {
        filter = document.createElement("div");
        filter.className = image.getAttribute("changeType");
      }
      filter.style.width = image.offsetWidth - 4 + "px";
      filter.style.height = image.offsetHeight - 4 + "px";
      if (image.y && image.x) {
        filter.style.top = image.y + "px";
        filter.style.left = image.x - 1 + "px";
      }
      if (existingDivs.length === 0) {
        _results.push(image.parentNode.insertBefore(filter, image));
      } else {
        _results.push(void 0);
      }
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

handleShortcut = function(e) {
  var destinationLink, target, _ref, _ref1;
  if (e.target.tagName.toLowerCase() !== 'input') {
    target = null;
    if (_ref = e.keyCode, __indexOf.call(prevKeys, _ref) >= 0) {
      target = selectedElement != null ? selectedElement.getAttribute("previous") : void 0;
    } else if (_ref1 = e.keyCode, __indexOf.call(nextKeys, _ref1) >= 0) {
      target = selectedElement != null ? selectedElement.getAttribute("next") : void 0;
    }
    if (target) {
      destinationLink = document.getElementById(target);
      if (destinationLink) {
        return scrollToTarget(destinationLink);
      }
    }
  }
};

window.scrollToEvent = function(e) {
  var anchor, destinationLink;
  if (e.target.nodeType === 3 || e.target.nodeName.toLowerCase() === "img") {
    e.target = e.target.parentNode;
  }
  if (e.target.nodeName.toLowerCase() !== 'a') {
    throw "target is not an anchor";
    return true;
  }
  anchor = e.target.hash.substr(1);
  destinationLink = document.getElementById(anchor);
  return scrollToTarget(destinationLink);
};

window.scrollToTarget = function(destinationLink) {
  var xy, _ref;
  if (!destinationLink) {
    throw "Unknown destination";
    return true;
  }
  xy = FixCalcXY(destinationLink, 0, -10);
  window.scrollTo(xy[0], xy[1]);
  setTimeout((function() {
    return showTip(constructTooltip(destinationLink));
  }), 0);
  if (destinationLink.className !== "diff-html-selected") {
    if (selectedElement.getAttribute("oldClass") && selectedElement.getAttribute("oldClass").length > 0 && selectedElement.getAttribute("oldClass") !== selectedElement.className) {
      if ((_ref = $("span[changeId='" + selectedElement.id + "']")[0]) != null) {
        _ref.className = selectedElement.getAttribute("oldClass");
      }
    }
    setTimeout((function() {
      var _ref1;
      return (_ref1 = $("span[changeId='" + selectedElement.id + "']")[0]) != null ? _ref1.className = 'diff-html-selected' : void 0;
    }), 1);
    destinationLink.setAttribute("oldClass", destinationLink.className);
    setTimeout((function() {
      var _ref1;
      return (_ref1 = $("span[changeId='" + destinationLink.id + "']")[0]) != null ? _ref1.className = destinationLink.className : void 0;
    }), 2000);
  }
  return false;
};

FixCalcXY = function(el, xoffset, yoffset) {
  var imageHeight, imagesContained, xy;
  imagesContained = el.getElementsByTagName("img");
  imageHeight = 0;
  if (!window.event && imagesContained.length > 0) {
    imageHeight = imagesContained[0].offsetHeight;
  }
  xy = $(el).offset();
  return [xy.left + xoffset, xy.top + yoffset - imageHeight];
};
